# DFS
'''
깊이 우선 탐색은 가장 깊숙이 위치하는 노드에 닿을 때까지 탐색하면 된다.
인접한 노드 중에서 방문하지 않은 노드가 여러 개 있으면 번호가 낮은 순서부터 처리한다. 
DFS는 스택 자료구조를 이용. 동작과정은
1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다. 
2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있다면 그 인접 노드를 스택에 넣고 방문 처리를 한다. 방문하지 않은 
인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다. 
3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복
'''

# dfs


from collections import deque


def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')

    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)


# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9

# 정의 된 DFS 함수 호출
dfs(graph, 1, visited)

# 결과 1 2 7 6 3 4 5

# BFS
'''
너비 우선 탐색. 가까운 노드부터 탐색하는 알고리즘 DFS는 최대한 멀리 있는 노드를 우선으로 탐색하는 방식으로 동작
BFS는 그 반대다. BFS 구현에서는 선입선출 방식인 큐 자료구조를 이용하는 것이 정석이다. 
인접한 노드를 반복적으로 큐에 넣도록 알고리즘을 작성하면 자연스럽게 먼저 들어온 것이 먼저 나가게 되어 
가까운 노드부터 탐색을 진행하게 된다.

동작 방식
1. 탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다. 
2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 한다. 
3. 반복
deque 라이브러리를 사용하는 것이 좋다. 
일반적인 경우 수행 시간은 DFS보다 좋은 편이다.

재귀 함수로 DFS를 구현하면 컴퓨터 시스템의 등작 특성상 실제 프로그램의 수행 시간은 느려질 수 있다.
따라서 스택 라이브러리를 이용해 시간 복잡도를 완화하는 테크닉이 필요할 떄도 있다. 
코딩테스트에서는 보통 DFS보다는 BFS 구현이 조금 더 빠르게 동작한다는 정도
'''

# BFS


def bfs(graph, start, visited):
    # Queue 구현을 위한 deque 라이브러리 사용
    queue = deque([start])
    # 현재 노드를 방문 처리
    visited[start] = True
    # 큐가 빌 때까지 반복
    while queue:
        # 큐에서 하나의 원소를 뽑아 출력
        v = queue.popleft()
        print(v, end=' ')
        # 해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
        for i in grpah[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True


# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]
# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)

visited = [False] * 9

# 정의된 BFS 함수 노출

bfs(graph, 1, visited)
